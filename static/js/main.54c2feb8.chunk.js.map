{"version":3,"sources":["components/TagItem.js","components/Tags.js","components/ImageView.js","components/Text2Doc.js","App.js","serviceWorker.js","index.js"],"names":["tagItem","props","tag","className","tags","tagList","split","map","index","TagItem","key","ImageView","toggleImage","console","log","state","showPopUp","setState","bind","this","css","src","alt","onClick","Modal","show","onHide","size","aria-labelledby","centered","Header","closeButton","Body","Component","Text2Doc","componentDidMount","readTextFile","filename","componentDidUpdate","prevProps","file","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","allText","responseText","text","send","getPrefix","row","pos","indexOf","prefix","slice","getText","getLinkName","getLink","length","renderText","toUpperCase","trim","process","src2","result","image","src3","result3","result4","name","link","rel","target","href","Tags","item","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54c2feb8.chunk.js","sourcesContent":["import React from 'react'\n\nfunction tagItem(props) {\n\n  const { tag } = props;\n\n  return (\n    <div className=\"tag\">\n      {tag}\n    </div>\n  )\n}\n\nexport default tagItem;\n","import React from 'react'\nimport TagItem from './TagItem'\n\nfunction tags(props) {\n\n  const { tagList } = props;\n\n  return (\n    <div className=\"row tagRow\">\n      {tagList.split(',').map((tag, index) => {\n        return(\n          <TagItem tag={tag} key={index} />\n        )\n      })}\n    </div>\n  )\n\n}\n\nexport default tags;\n","import React, { Component } from 'react'\n\nimport Modal from 'react-bootstrap/Modal'\n\n\nclass ImageView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPopUp: false\n    }\n    this.toggleImage = this.toggleImage.bind(this);\n  }\n\n\n  toggleImage = () => {\n\n    console.log(`Clicking: ${this.state.showPopUp}`);\n    this.setState(state => ({\n      showPopUp: !state.showPopUp\n    }));\n  }\n\n  render() {\n    return (\n      <>\n        <img className={this.props.css} src={this.props.src} alt=\"\" onClick={this.toggleImage} />\n        {this.state.showPopUp ?\n          <Modal show={true}\n            onHide={this.toggleImage}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered>\n            <Modal.Header closeButton>\n\n            </Modal.Header>\n            <Modal.Body>\n\n              <img className=\"image-popup\" src={this.props.src} alt=\"\" onClick={this.toggleImage}  />\n\n            </Modal.Body>\n          </Modal>\n          : null\n        }\n      </>\n    )\n  }\n\n}\n\nexport default ImageView","import React from 'react'\nimport Tags from './Tags'\nimport ImageView from './ImageView'\n\nimport '../Text2Doc.css'\n\nclass Text2Doc extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\"\n    };\n  }\n\n  componentDidMount = () => {\n    this.readTextFile(this.props.filename);\n  }\n\n  componentDidUpdate = (prevProps) => {\n\n    if (this.props.filename !== prevProps.filename) {\n      this.readTextFile(this.props.filename);\n    }\n  }\n\n  readTextFile = file => {\n    console.log(\"readTextFile: \" + file)\n    var rawFile = new XMLHttpRequest();\n    rawFile.open(\"GET\", file, false);\n    rawFile.onreadystatechange = () => {\n      if (rawFile.readyState === 4) {\n        if (rawFile.status === 200 || rawFile.status === 0) {\n          var allText = rawFile.responseText;\n  \n          this.setState({\n            text: allText\n          });\n        }\n      }\n    };\n    \n    rawFile.send(null);\n  };\n\n  getPrefix = (row) => {\n\n    const pos = row.indexOf(\":\");\n    var prefix = \"NF\";\n\n    if (pos > 0) {\n      prefix = row.slice(0, pos);\n    }\n\n    // console.log(prefix);\n    return prefix;\n  }\n\n  getText = (row) => {\n    const pos = row.indexOf(\":\");\n    var text = row;\n    if (pos > 0) {\n      text = row.slice(pos + 1);\n    }\n    return text;\n  }\n\n  getLinkName = (row) => {\n    const pos = row.indexOf(\"]\");\n    var text = row;\n    if (pos > 0) {\n      text = row.slice(1, pos);\n    }\n    return text;\n  }\n\n  getLink = (row) => {\n    const pos = row.indexOf(\"]\");\n    var text = row;\n    if (pos > 0) {\n      text = row.slice(pos + 2); // take into account the (\n      text = text.slice(0, text.length - 1);\n    }\n    return text;\n  }\n\n  renderText = (key, prefix, text) => {\n    // console.log(\"renderText:\" + prefix);\n\n    switch (prefix.toUpperCase()) {\n      case 'B': // Blank Row\n        return (<div>{'\\u00A0'}</div>)\n      case 'NF':\n        return (<div key={key}>{text}</div>)\n      case 'H1':\n        return (<h1 key={key}>{text}</h1>)\n      case 'H2':\n        return (<h2 key={key}>{text}</h2>)\n      case 'H2U':\n        return (<h2 className=\"underline\" key={key}>{text}</h2>)\n      case 'H3':\n        return (<h3 key={key}>{text}</h3>)\n      case 'H3U':\n        return (<h3 className=\"underline\" key={key}>{text}</h3>)\n      case 'H4':\n        return (<h4 key={key}>{text}</h4>)\n      case 'H4U':\n        return (<h4 className=\"underline\" key={key}>{text}</h4>)\n      case 'HL':\n        return (<div className=\"horizontal-line\"></div>)\n      case 'P':\n        return (<p key={key}>{text}</p>)\n      case 'C':\n        return (<span className=\"code\" key={key}>{text}</span>)\n      case 'I':\n      case 'I1':\n\n        const filename = text.trim();\n        const src = `${process.env.PUBLIC_URL}/img/${filename}`;\n        return (<div className=\"row center\">\n          <ImageView css={\"image001 shadow\"} src={src} />\n        </div>)\n      case 'I2':\n\n        var src2 = \"\";\n\n        const images = text.split(\",\");\n\n        const result = images.map(image => {\n          const filename = image.trim();\n          src2 = `${process.env.PUBLIC_URL}/img/${filename}`;\n          return(<ImageView css={\"image002 shadow\"} src={src2} />);\n        })\n        return (<div className=\"row center\">{result}</div>)\n\n      case 'I3':\n\n        var src3 = \"\";\n\n        const images3 = text.split(\",\");\n\n        const result3 = images3.map(image => {\n          const filename = image.trim();\n          src3 = `${process.env.PUBLIC_URL}/img/${filename}`;\n          return(<ImageView css={\"image003 shadow\"} src={src3} />);\n        })\n        return (<div className=\"row center\">{result3}</div>)\n        case 'I4':\n\n          var src4 = \"\";\n  \n          const images4 = text.split(\",\");\n  \n          const result4 = images4.map(image => {\n            const filename = image.trim();\n            src3 = `${process.env.PUBLIC_URL}/img/${filename}`;\n            return(<ImageView css={\"image004 shadow\"} src={src4} />);\n          })\n          return (<div className=\"row center\">{result4}</div>)\n  \n      case 'L':\n        const name = this.getLinkName(text);\n        const link = this.getLink(text);\n        return (<a className=\"normal-a\" rel=\"noopener noreferrer\" target='_blank' href={link}>{name}</a>)\n      case 'T':\n        return (<Tags tagList={text} />);\n      case '*':\n        return <span className='bullet'>{text}<br /></span>\n      default:\n        return <span key={key}>{text}<br /></span>\n    }\n  }\n\n  render() {\n    //console.log(\"ArticleReader - render\" + this.state.filename);\n    var prefix = \"\";\n    var text = \"\";\n\n    return (\n      <div className=\"article\">\n        {this.state.text.split(\"\\n\").map((item, key) => {\n\n          prefix = this.getPrefix(item);\n          text = this.getText(item);\n\n          return (\n            <div key={key}>{this.renderText(key, prefix, text)}</div>\n          )\n        })}\n      </div>\n    )\n  }\n\n}\n\nexport default Text2Doc;\n\n\n","import React from 'react';\nimport './App.css';\n\nimport Text2Doc from './components/Text2Doc'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n    <h1>Text2Doc</h1>\n      <div className=\"row\">\n        <div className=\"wrapper\">\n          <Text2Doc filename={`${process.env.PUBLIC_URL}/content/example.txt`} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}